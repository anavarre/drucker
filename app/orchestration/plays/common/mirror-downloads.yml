---
- name: "MIRROR: Check if mirror archives directory exists"
  stat:
    path: "{{ mirror_archives_dir }}"
  register: mirror_archives_dir_check
  changed_when: mirror_archives_dir_check.stat.exists == false

- name: "MIRROR: Create archives directory"
  file:
    path: "{{ mirror_archives_dir }}"
    state: directory
  when: mirror_archives_dir_check.stat.exists == false

# Apache Solr
- name: "MIRROR: Check if Apache Solr archive exists"
  stat:
    path: "{{ solr_mirror_archive_path }}"
  register: solr_mirror_archive_path_check
  changed_when: solr_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download latest Apache Solr archive (this can take a while...)"
  get_url:
    url: "{{ solr_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: solr_get_url_result
  until: "'OK' in solr_get_url_result.msg"
  retries: 3
  delay: 10
  when: solr_mirror_archive_path_check.stat.exists == false

# PECL Upload Progress
- name: "MIRROR: Check if PECL uploadprogress archive exists"
  stat:
    path: "{{ uploadprogress_mirror_archive_path }}"
  register: uploadprogress_mirror_archive_path_check
  changed_when: uploadprogress_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download latest PECL uploadprogress release"
  get_url:
    url: "{{ uploadprogress_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: uploadprogress_get_url_result
  until: "'OK' in uploadprogress_get_url_result.msg"
  retries: 3
  delay: 10
  when: uploadprogress_mirror_archive_path_check.stat.exists == false

# LibYAML
- name: "MIRROR: Check if the LibYAML C parser archive exists"
  stat:
    path: "{{ libyaml_mirror_archive_path }}"
  register: libyaml_archive_check
  changed_when: libyaml_archive_check.stat.exists == false

- name: "MIRROR: Download latest LibYAML release"
  get_url:
    url: "{{ libyaml_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: libyaml_get_url_result
  until: "'OK' in libyaml_get_url_result.msg"
  retries: 3
  delay: 10
  when: libyaml_archive_check.stat.exists == false

# PECL YAML
- name: "MIRROR: Check if the PECL YAML archive exists"
  stat:
    path: "{{ pecl_yaml_mirror_archive_path }}"
  register: pecl_yaml_archive_check
  changed_when: pecl_yaml_archive_check.stat.exists == false

- name: "MIRROR: Download latest PECL YAML release"
  get_url:
    url: "{{ pecl_yaml_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: pecl_yaml_get_url_result
  until: "'OK' in pecl_yaml_get_url_result.msg"
  retries: 3
  delay: 10
  when: pecl_yaml_archive_check.stat.exists == false

# Drupal Console
- name: "MIRROR: Check if the Drupal Console Launcher PHAR file exists"
  stat:
    path: "{{ drupal_console_mirror_archive_path }}"
  register: drupal_console_mirror_archive_path_check
  changed_when: drupal_console_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download Drupal Console Launcher PHAR file"
  get_url:
    url: "{{ drupal_console_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    mode: 0755
    validate_certs: no
  register: drupal_console_get_url_result
  until: "'OK' in drupal_console_get_url_result.msg"
  retries: 3
  delay: 10
  when: drupal_console_mirror_archive_path_check.stat.exists == false

# Xdebug
- name: "MIRROR: Check if the Xdebug version file exists"
  stat:
    path: "{{ xdebug_version_file }}"
  register: xdebug_version_file_check
  changed_when: xdebug_version_file_check.stat.exists == false

- name: "MIRROR: Write Xdebug version to file"
  copy:
    content: "{{ xdebug_stable_release }}"
    dest: "{{ xdebug_version_file }}"
  when: xdebug_version_file_check.stat.exists == false

- name: "MIRROR: Store Xdebug version variable"
  shell: cat {{ xdebug_version_file }}
  register: xdebug_read_version
  changed_when: xdebug_version_file_check.stat.exists == false

- name: "MIRROR: Check if the Xdebug archive exists"
  stat:
    path: "{{ xdebug_mirror_archive_path }}"
  register: xdebug_mirror_archive_path_check
  changed_when: xdebug_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Check if Xdebug can be updated"
  shell: ls {{ xdebug_mirror_archive_path }} | grep -o {{ xdebug_stable_release }} || echo "absent"
  register: xdebug_update
  when: xdebug_mirror_archive_path_check.stat.exists == true
  changed_when: xdebug_update.stdout == "absent"

- name: "MIRROR: Download latest Xdebug release"
  get_url:
    url: "{{ xdebug_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: xdebug_get_url_result
  until: "'OK' in xdebug_get_url_result.msg"
  retries: 3
  delay: 10
  when: xdebug_mirror_archive_path_check.stat.exists == false or xdebug_update.stdout != xdebug_stable_release

- name: "MIRROR: Write new Xdebug version to file"
  copy:
    content: "{{ xdebug_stable_release }}"
    dest: "{{ xdebug_version_file }}"
  when: xdebug_get_url_result.changed

# Tideways
- name: "MIRROR: Check if the Tideways archive exists"
  stat:
    path: "{{ tideways_mirror_archive_path }}"
  register: tideways_mirror_archive_path_check
  changed_when: tideways_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download latest Tideways release"
  get_url:
    url: "{{ tideways_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: tideways_get_url_result
  until: "'OK' in tideways_get_url_result.msg"
  retries: 3
  delay: 10
  when: tideways_mirror_archive_path_check.stat.exists == false

# PhantomJS
- name: "MIRROR: Check if the PhantomJS archive exists"
  stat:
    path: "{{ phantomjs_mirror_archive_path }}"
  register: phantomjs_mirror_archive_path_check
  changed_when: phantomjs_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download latest PhantomJS release"
  get_url:
    url: "{{ phantomjs_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: phantomjs_get_url_result
  until: "'OK' in phantomjs_get_url_result.msg"
  retries: 3
  delay: 10
  when: phantomjs_mirror_archive_path_check.stat.exists == false

# CodeSniffer
- name: "MIRROR: Check if the phpcs PHAR file exists"
  stat:
    path: "{{ phpcs_mirror_archive_path }}"
  register: phpcs_mirror_archive_path_check
  changed_when: phpcs_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download phpcs PHAR file"
  get_url:
    url: "{{ phpcs_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    mode: 0755
    validate_certs: no
  register: phpcs_get_url_result
  until: "'OK' in phpcs_get_url_result.msg"
  retries: 3
  delay: 10
  when: phpcs_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Check if the phpcbf PHAR file exists"
  stat:
    path: "{{ phpcbf_mirror_archive_path }}"
  register: phpcbf_mirror_archive_path_check
  changed_when: phpcbf_mirror_archive_path_check.stat.exists == false

- name: "MIRROR: Download phpcbf PHAR file"
  get_url:
    url: "{{ phpcbf_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    mode: 0755
    validate_certs: no
  register: phpcbf_get_url_result
  until: "'OK' in phpcbf_get_url_result.msg"
  retries: 3
  delay: 10
  when: phpcbf_mirror_archive_path_check.stat.exists == false

# PHP-CS-Fixer
- name: "MIRROR: Check if the PHP-CS-Fixer version file exists"
  stat:
    path: "{{ php_cs_fixer_version_file }}"
  register: php_cs_fixer_version_file_check
  changed_when: php_cs_fixer_version_file_check.stat.exists == false

- name: "MIRROR: Write PHP-CS-Fixer version to file"
  copy:
    content: "{{ php_cs_fixer_stable_release }}"
    dest: "{{ php_cs_fixer_version_file }}"
  when: php_cs_fixer_version_file_check.stat.exists == false

- name: "MIRROR: Store PHP-CS-Fixer version variable"
  shell: cat {{ php_cs_fixer_version_file }}
  register: php_cs_fixer_read_version
  changed_when: php_cs_fixer_version_file_check.stat.exists == false

- name: "MIRROR: Check if the PHP-CS-Fixer PHAR file exists"
  stat:
    path: "{{ php_cs_fixer_mirror_archive_file }}"
  register: php_cs_fixer_mirror_archive_file_check
  changed_when: php_cs_fixer_mirror_archive_file_check.stat.exists == false

- name: "MIRROR: Download PHP-CS-Fixer PHAR file"
  get_url:
    url: "{{ php_cs_fixer_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    mode: 0755
    validate_certs: no
  register: php_cs_fixer_get_url_result
  until: "'OK' in php_cs_fixer_get_url_result.msg"
  retries: 3
  delay: 10
  when: php_cs_fixer_mirror_archive_file_check.stat.exists == false or php_cs_fixer_read_version.stdout != php_cs_fixer_stable_release

- name: "MIRROR: Write new PHP-CS-Fixer version to file"
  copy:
    content: "{{ php_cs_fixer_stable_release }}"
    dest: "{{ php_cs_fixer_version_file }}"
  when: php_cs_fixer_get_url_result.changed

# PHPmd
- name: "MIRROR: Check if the phpmd PHAR file exists"
  stat:
    path: "{{ phpmd_mirror_archive_file }}"
  register: phpmd_mirror_archive_file_check
  changed_when: phpmd_mirror_archive_file_check.stat.exists == false

- name: "MIRROR: Download phpmd PHAR file"
  get_url:
    url: "{{ phpmd_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    mode: 0755
    validate_certs: no
    force: yes
  register: phpmd_get_url_result
  until: "'OK' in phpmd_get_url_result.msg"
  retries: 3
  delay: 10
  when: phpmd_mirror_archive_file_check.stat.exists == false

# mcstat
- name: "MIRROR: Check if mcstat archive exists"
  stat:
    path: "{{ mcstat_mirror_archive_file }}"
  register: mcstat_mirror_archive_file_check
  changed_when: mcstat_mirror_archive_file_check.stat.exists == false

- name: "MIRROR: Download latest mcstat release"
  get_url:
    url: "{{ mcstat_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: mcstat_get_url_result
  until: "'OK' in mcstat_get_url_result.msg"
  retries: 3
  delay: 10
  when: mcstat_mirror_archive_file_check.stat.exists == false

# phpMyAdmin
- name: "MIRROR: Check if the phpMyAdmin version file exists"
  stat:
    path: "{{ phpmyadmin_version_file }}"
  register: phpmyadmin_version_file_check
  changed_when: phpmyadmin_version_file_check.stat.exists == false

- name: "MIRROR: Write phpMyAdmin version to file"
  copy:
    content: "{{ phpmyadmin_stable_release }}"
    dest: "{{ phpmyadmin_version_file }}"
  when: phpmyadmin_version_file_check.stat.exists == false

- name: "MIRROR: Store phpMyAdmin version variable"
  shell: cat {{ phpmyadmin_version_file }}
  register: phpmyadmin_read_version
  changed_when: phpmyadmin_version_file_check.stat.exists == false

- name: "MIRROR: Check if phpMyAdmin archive exists"
  stat:
    path: "{{ phpmyadmin_mirror_archive_file_path }}"
  register: pma_mirror_archive_file_path_check
  changed_when: pma_mirror_archive_file_path_check.stat.exists == false

- name: "MIRROR: Download latest phpMyAdmin release"
  get_url:
    url: "{{ phpmyadmin_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: pma_get_url_result
  until: "'OK' in pma_get_url_result.msg"
  retries: 3
  delay: 10
  when: pma_mirror_archive_file_path_check.stat.exists == false or phpmyadmin_read_version.stdout != phpmyadmin_stable_release

- name: "MIRROR: Write new phpMyAdmin version to file"
  copy:
    content: "{{ phpmyadmin_stable_release }}"
    dest: "{{ phpmyadmin_version_file }}"
  when: pma_get_url_result.changed

# adminer
- name: "MIRROR: Check if adminer file exists"
  stat:
    path: "{{ adminer_mirror_filepath }}"
  register: adminer_mirror_filepath_check
  changed_when: adminer_mirror_filepath_check.stat.exists == false

- name: "MIRROR: Download latest adminer release"
  get_url:
    url: "{{ adminer_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: adminer_get_url_result
  until: "'OK' in adminer_get_url_result.msg"
  retries: 3
  delay: 10
  when: adminer_mirror_filepath_check.stat.exists == false

# Drush Launcher
- name: "MIRROR: Check if the Drush Launcher version file exists"
  stat:
    path: "{{ drush_launcher_version_file }}"
  register: drush_launcher_version_file_check
  changed_when: drush_launcher_version_file_check.stat.exists == false

- name: "MIRROR: Write the Drush Launcher version to file"
  copy:
    content: "{{ drush_launcher_stable_release }}"
    dest: "{{ drush_launcher_version_file }}"
  when: drush_launcher_version_file_check.stat.exists == false

- name: "MIRROR: Store the Drush Launcher version variable"
  shell: cat {{ drush_launcher_version_file }}
  register: drush_launcher_read_version
  changed_when: drush_launcher_version_file_check.stat.exists == false

- name: "MIRROR: Check if the Drush launcher PHAR file exists"
  stat:
    path: "{{ drush_launcher_mirror_filepath }}"
  register: drush_launcher_mirror_filepath_check
  changed_when: drush_launcher_mirror_filepath_check.stat.exists == false

- name: "MIRROR: Download latest Drush launcher PHAR release"
  get_url:
    url: "{{ drush_launcher_download_link }}"
    dest: "{{ mirror_archives_dir }}"
    validate_certs: no
  register: drush_launcher_get_url_result
  until: "'OK' in drush_launcher_get_url_result.msg"
  retries: 3
  delay: 10
  when: drush_launcher_mirror_filepath_check.stat.exists == false or drush_launcher_read_version.stdout != drush_launcher_stable_release

- name: "MIRROR: Write new Drush Launcher version to file"
  copy:
    content: "{{ drush_launcher_stable_release }}"
    dest: "{{ drush_launcher_version_file }}"
  when: drush_launcher_get_url_result.changed
