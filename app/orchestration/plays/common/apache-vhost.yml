---
- name: "APACHE: Check if new vHost exists"
  stat:
    path: "{{ sites_enabled }}/{{ sitename }}.conf"
  register: new_vhost_check
  ignore_errors: True

- name: "APACHE: Deploy default vHost template"
  copy:
    src: "{{ apache_template_source_file }}"
    dest: "{{ sites_available }}"
    mode: 0644
  when: new_vhost_check.stat.exists == false

- name: "APACHE: Rename default vHost template"
  command: mv {{ vhost_template }} {{ sites_available }}/{{ sitename }}.conf
  when: new_vhost_check.stat.exists == false

- name: "APACHE: Modify new vHost"
  replace:
    dest: "{{ sites_available }}/{{ sitename }}.conf"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_vhost_check.stat.exists == false

- import_tasks: apache-vhost-fcgi.yml

- name: "APACHE: Enable new vHost"
  file:
    src: ../sites-available/{{ sitename }}.conf
    dest: "{{ sites_enabled }}/{{ sitename }}.conf"
    state: link
    force: yes
  register: test
  notify: Reload Apache
  when: new_vhost_check.stat.exists == false

# Docker provides the container with a custom /etc/hosts file so we have to hack
# our way through modifying it.
- name: "SYSTEM: Copy hosts file"
  command: cp {{ hosts_file }} {{ tmp_hosts_file }}
  when: new_vhost_check.stat.exists == false

- name: "SYSTEM: Add new entry"
  lineinfile:
    dest: "{{ tmp_hosts_file }}"
    line: "{{  web_ip }}\t{{ sitename }}.{{ tld }}"
  when: new_vhost_check.stat.exists == false

- name: "SYSTEM: Replace hosts file"
  command: cp {{ tmp_hosts_file }} {{ hosts_file }}
  when: new_vhost_check.stat.exists == false
