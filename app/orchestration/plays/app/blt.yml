---
- name: "BLT: Check if new build exists"
  stat:
    path: "{{ drupal_root }}"
  register: new_site
  ignore_errors: True

# We're using the shell command here, because using the composer command leaves
# us with missing vendor dependencies, for some reason.
- name: "BLT: Create build (this can take a while)"
  shell: composer create-project --no-interaction acquia/blt-project:9.x-dev {{ sitename }}
  args:
    chdir: "{{ webroot }}"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "BLT: Install the BLT command"
  blockinfile:
    dest: "{{ bashrc }}"
    block: |
      function blt() {
        if [ "`git rev-parse --show-cdup 2> /dev/null`" != "" ]; then
          GIT_ROOT=$(git rev-parse --show-cdup)
        else
          GIT_ROOT="."
        fi

        if [ -f "$GIT_ROOT/vendor/bin/blt" ]; then
          $GIT_ROOT/vendor/bin/blt "$@"
        else
          echo "You must run this command from within a BLT-generated project repository."
          return 1
        fi
      }
    insertafter: EOF
    marker: "# {mark} MANAGED BLT COMMAND BLOCK"

- name: "BLT: Make sure to source the .bashrc file"
  shell: source {{ bashrc }}
  args:
     executable: /bin/bash
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "BLT: Generate default local settings files"
  command: "{{ blt_command }} setup:settings"
  args:
    chdir: "{{ drupal_root }}"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- import_tasks: ../common/database.yml

- name: "BLT: Update database name"
  replace:
    dest: "{{ blt_local_settings }}"
    regexp: '^(.*)\$db_name = ''drupal'';(.*)$'
    replace: '\1$db_name = ''{{ sitename }}'';\2'
  when: new_site.stat.exists == false

- name: "BLT: Update database username"
  replace:
    dest: "{{ blt_local_settings }}"
    regexp: '^(.*)''username'' => ''drupal'',(.*)$'
    replace: '\1''username'' => ''{{ db_creds }}'',\2'
  when: new_site.stat.exists == false

- name: "BLT: Update database password"
  replace:
    dest: "{{ blt_local_settings }}"
    regexp: '^(.*)''password'' => ''drupal'',(.*)$'
    replace: '\1''password'' => ''{{ db_creds }}'',\2'
  when: new_site.stat.exists == false

- name: "BLT: Update database host"
  replace:
    dest: "{{ blt_local_settings }}"
    regexp: '^(.*)''host'' => ''localhost'',(.*)$'
    replace: '\1''host'' => ''{{ db_ip }}'',\2'
  when: new_site.stat.exists == false

- import_tasks: ../common/drush-aliases.yml

- name: "BLT: Set up Behat tests"
  command: "{{ blt_command }} setup:behat"
  args:
    chdir: "{{ drupal_root }}"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "BLT: Set behat base_url value"
  replace:
    dest: "{{ blt_behat_local_yml }}"
    regexp: '^(.*)local.blt.com(.*)$'
    replace: '\1{{ sitename }}.{{ tld }}\2'
  when: new_site.stat.exists == false

- name: "BLT: Install Drupal (Lightning) and finish setup"
  command: "{{ blt_command }} setup"
  args:
    chdir: "{{ drupal_root }}"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "BLT: Set Drush URI"
  replace:
    dest: "{{ blt_behat_local_drush_yml }}"
    regexp: '^(.*)local.blted8.com(.*)$'
    replace: '\1{{ sitename }}.{{ tld }}\2'
  when: new_site.stat.exists == false

- name: "BLT: Set BLT URI"
  replace:
    dest: "{{ webroot }}/{{ sitename }}/blt/blt.yml"
    regexp: '^(.*)local.\${project.machine_name}.com(.*)$'
    replace: '\1${project.machine_name}.local\2'

- import_tasks: ../common/apache-vhost.yml
- import_tasks: ../common/app-registry.yml
