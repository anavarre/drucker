---
- name: "PHPMYADMIN: Check version"
  stat:
    path: "{{ phpmyadmin_release_date_file }}"
  register: phpmyadmin_version
  ignore_errors: True

- name: "PHPMYADMIN: Check if software can be updated"
  shell: ls {{ phpmyadmin_release_date_file }} | tail -c 6
  register: phpmyadmin_update
  changed_when: phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Copy latest release from mirror"
  get_url:
    url: "{{ phpmyadmin_mirror_download_link }}"
    dest: "{{ download_dir }}"
    validate_certs: no
  register: pma_get_url_result
  until: "'OK' in pma_get_url_result.msg"
  retries: 3
  delay: 10
  when: phpmyadmin_version.stat.exists == false or phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Extract files"
  unarchive:
    src: "{{ phpmyadmin_archive_path }}"
    dest: "{{ webroot }}"
    copy: no
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: phpmyadmin_version.stat.exists == false or phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Delete outdated version"
  file:
    path: "{{ phpmyadmin_root }}"
    state: absent
  when: phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Rename directory"
  command: mv {{ webroot }}/{{ phpmyadmin_temp_dirname }} {{ phpmyadmin_root }}
  when: phpmyadmin_version.stat.exists == false or phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Delete archive"
  file:
    path: "{{ phpmyadmin_archive_path }}"
    state: absent
  when: phpmyadmin_version.stat.exists == false or phpmyadmin_update.stdout != phpmyadmin_stable_release

- name: "PHPMYADMIN: Check if config.inc.php exists"
  stat:
    path: "{{ phpmyadmin_config }}"
  register: config_inc
  ignore_errors: True

- name: "PHPMYADMIN: Create config.inc.php file"
  command: cp {{ phpmyadmin_config_sample }} {{ phpmyadmin_config }}
  when: config_inc.stat.exists == false

- name: "PHPMYADMIN: Define config auth"
  lineinfile:
    dest: "{{ phpmyadmin_config }}"
    regexp: '^(.*)auth_type(.*)$'
    line: "$cfg['Servers'][$i]['auth_type'] = 'config';"
  when: config_inc.stat.exists == false

- name: "PHPMYADMIN: Configure automated login"
  blockinfile:
    dest: "{{ phpmyadmin_config }}"
    block: |
      $cfg['Servers'][$i]['username'] = '{{ db_creds }}';
      $cfg['Servers'][$i]['password'] = '{{ db_creds }}';
    insertafter: '^(.*)auth_type(.*)$'
  when: config_inc.stat.exists == false

- name: "PHPMYADMIN: Set connection to remote database server"
  lineinfile:
    dest: "{{ phpmyadmin_config }}"
    regexp: "^(.*)localhost(.*)$"
    line: "$cfg['Servers'][$i]['host'] = '{{ db_ip }}';"
  when: config_inc.stat.exists == false

- name: "PHPMYADMIN: Check if vHost exists"
  stat:
    path: "{{ phpmyadmin_vhost }}"
  register: phpmyadmin_conf
  ignore_errors: True

- name: "PHPMYADMIN: Deploy default vHost template"
  copy:
    src: "{{ source_file_dir }}/apache-template.conf"
    dest: "{{ sites_available }}"
    mode: 0644
  when: phpmyadmin_conf.stat.exists == false

- name: "PHPMYADMIN: Rename default vHost template"
  command: mv {{ vhost_template }} {{ phpmyadmin_available_vhost }}
  when: phpmyadmin_conf.stat.exists == false

- name: "PHPMYADMIN: Add support for php-fpm Fast-CGI"
  blockinfile:
    dest: "{{ phpmyadmin_available_vhost }}"
    block: |6
                  ProxyPassMatch ^/(.*\.php(/.*)?)$ unix:/var/run/php/php{{ default_php_version }}-fpm.sock|fcgi://127.0.0.1:9000/var/www/html/phpmyadmin/
    insertafter: '^(.*)DocumentRoot(.*)$'
    marker: "# {mark} MANAGED PHP-FPM FAST-CGI BLOCK"
  when: phpmyadmin_conf.stat.exists == false

- name: "PHPMYADMIN: Modify vHost 1/2"
  replace:
    dest: "{{ phpmyadmin_available_vhost }}"
    regexp: '^(.*)SITENAME\/docroot(.*)$'
    replace: '\1phpmyadmin\2'
  when: phpmyadmin_conf.stat.exists == false

- name: "PHPMYADMIN: Modify vHost 2/2"
  replace:
    dest: "{{ phpmyadmin_available_vhost }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1phpmyadmin\2'
  when: phpmyadmin_conf.stat.exists == false

- name: "PHPMYADMIN: Enable vHost"
  file:
    src: ../sites-available/phpmyadmin.conf
    dest: "{{ phpmyadmin_vhost }}"
    state: link
  notify: Reload Apache
  when: phpmyadmin_conf.stat.exists == false

- name: "MYSQL: Install MariaDB client"
  package:
    name: mariadb-client
    state: present
    force: yes
