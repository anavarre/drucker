---
- name: "GIT: Check if .git-completion.bash exists"
  stat:
    path: "{{ git_completion }}"
  register: git_completion

- name: "GIT: Deploy .git-completion.bash"
  copy:
    src: "{{ git_completion_source_file }}"
    dest: "{{ home }}"
    mode: 0644
    owner: "{{ user }}"
    group: "{{ user }}"
  become: yes
  become_user: "{{ user }}"
  when: git_completion.stat.exists == false

- name: "GIT: Check if .git-prompt.sh exists"
  stat:
    path: "{{ git_prompt }}"
  register: git_prompt

- name: "GIT: Deploy .git-prompt.sh"
  copy:
    src: "{{ git_prompt_source_file }}"
    dest: "{{ home }}"
    mode: 0644
    owner: "{{ user }}"
    group: "{{ user }}"
  become: yes
  become_user: "{{ user }}"
  when: git_prompt.stat.exists == false

- name: "GIT: Check if .gitconfig exists"
  stat:
    path: "{{ git_config }}"
  register: git_config

- name: "GIT: Deploy .gitconfig"
  copy:
    src: "{{ git_config_source_file }}"
    dest: "{{ home }}"
    mode: 0644
    owner: "{{ user }}"
    group: "{{ user }}"
  become: yes
  become_user: "{{ user }}"
  when: git_config.stat.exists == false

- name: "GIT: Check if global .gitignore file exists"
  stat:
    path: "{{ global_gitignore }}"
  register: global_gitignore

- name: "GIT: Deploy global .gitignore file"
  copy:
    src: "{{ global_gitignore_source_file }}"
    dest: "{{ home }}/.gitignore"
    mode: 0644
    owner: "{{ user }}"
    group: "{{ user }}"
  become: yes
  become_user: "{{ user }}"
  when: global_gitignore.stat.exists == false

- name: "GIT: Check if bash-git-prompt archive exists"
  stat:
    path: "{{ bash_git_prompt_archive_path }}"
  register: bash_git_prompt_archive

- name: "GIT: Check if bash-git-prompt can be updated"
  shell: ls {{ bash_git_prompt_archive_path }} | grep -o "{{ bash_git_prompt_stable_version }}" || echo "outdated"
  register: bash_git_prompt_update
  changed_when: bash_git_prompt_update.stdout != bash_git_prompt_stable_version

- name: "GIT: Download .bash-git-prompt archive"
  get_url:
    url: "{{ bash_git_prompt_download_link }}"
    dest: "{{ download_dir }}"
    validate_certs: no
  register: prompt_get_url_result
  until: "'OK' in prompt_get_url_result.msg"
  retries: 3
  delay: 10
  when: bash_git_prompt_archive.stat.exists == false or bash_git_prompt_update.stdout != bash_git_prompt_stable_version

- name: "GIT: Extract bash-git-prompt files"
  unarchive:
    src: "{{ bash_git_prompt_archive_path }}"
    dest: "{{ download_dir }}"
    copy: no
  become: yes
  become_user: "{{ user }}"
  when: bash_git_prompt_archive.stat.exists == false or bash_git_prompt_update.stdout != bash_git_prompt_stable_version

- name: "GIT: Delete outdated .bash-git-prompt directory"
  file:
    path: "{{ bash_git_prompt }}"
    state: absent
  when: bash_git_prompt_update.stdout != bash_git_prompt_stable_version

- name: "GIT: Rename and move bash-git-prompt directory"
  command: mv {{ bash_git_prompt_temp_path }} {{ bash_git_prompt }}
  when: bash_git_prompt_archive.stat.exists == false or bash_git_prompt_update.stdout != bash_git_prompt_stable_version

- name: "GIT: Check if .bashrc needs to be customized"
  shell: grep -o "MANAGED GIT BLOCK" {{ bashrc }} || echo "absent"
  register: git_bashrc

- name: "GIT: Customize .bashrc"
  blockinfile:
    dest: "{{ bashrc }}"
    block: |
      # Git
      if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
      fi

      if [ -f ~/.git-prompt.sh ]; then
      . ~/.git-prompt.sh
      fi

      source ~/.bash-git-prompt/gitprompt.sh
      GIT_PROMPT_ONLY_IN_REPO=1
    insertafter: EOF
    marker: "# {mark} MANAGED GIT BLOCK"
  when: git_bashrc.stdout == "absent"
