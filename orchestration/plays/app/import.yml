---
- name: "IMPORT: Check if MySQL dump exists"
  stat:
    path: "{{ item }}"
  with_first_found:
    - files:
      - "{{ import_sqlgz }}"
      - "{{ import_sql }}"
      skip: true
  register: dump_detection
  ignore_errors: True

- set_fact:
    dump: "{{ dump_detection.results[0]['item'] }}"
  when: dump_detection.skipped is not defined

- name: "IMPORT: Create new database"
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    config_file: "{{ db_config }}"
    name: "{{ sitename }}"
    state: present
  when: dump_detection.skipped is not defined

- name: "IMPORT: Restore MySQL dump"
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    config_file: "{{ db_config }}"
    name: "{{ sitename }}"
    state: import
    target: "{{ dump }}"
  when: dump_detection.skipped is not defined

- name: "IMPORT: Check if archived database dump exists"
  stat:
    path: "{{ import_archive_path }}"
  register: db_archive
  ignore_errors: True

- name: "IMPORT: Archive imported database dump"
  command: mv {{ dump }} {{ archives_dir }}
  when: dump_detection.skipped is not defined and db_archive.stat.exists == false

- name: "IMPORT: Check if site structure exists"
  stat:
    path: "{{ drupal_root }}"
  register: import_site_structure
  ignore_errors: True

- name: "IMPORT: Create new site structure"
  file:
    path: "{{ item }}"
    state: directory
    mode: 02755
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ drupal_root }}/config"
    - "{{ drupal_root }}/{{ default_configuration_dir }}"
  when: import_site_structure.stat.exists == false

- name: "IMPORT: Check if docroot exists"
  stat:
    path: "{{ importable_sitename_path }}"
  register: docroot_import
  ignore_errors: True

- name: "IMPORT: Import docroot"
  command: cp -R {{ importable_sitename_path }} {{ webroot }}
  register: import_docroot
  when: import_site_structure.stat.exists == false and docroot_import.stat.exists == true

- name: "IMPORT: Check if archived docroot exists"
  stat:
    path: "{{ import_archive_path }}"
  register: docroot_archive
  ignore_errors: True

- name: "IMPORT: Archive imported docroot"
  command: mv {{ importable_sitename_path }} {{ archives_dir }}
  when: docroot_archive.stat.exists == false

- name: "IMPORT: Make sure permissions are correct"
  file:
    path: "{{ drupal_root }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
    recurse: yes
  when: import_site_structure.stat.exists == false and docroot_import.stat.exists == true

- import_tasks: ../common/apache-vhost.yml

- name: "IMPORT: Check if Drush alias exist"
  stat:
    path: "{{ imported_site_alias }}"
  register: sitename_alias

- name: "IMPORT: Deploy Drush alias"
  copy:
    src: "{{ drush_alias_source_file }}"
    dest: "{{ imported_site_alias }}"
    mode: 0644
  when: sitename_alias.stat.exists == false

- name: "IMPORT: Update Drush alias"
  replace:
    dest: "{{ imported_site_alias }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: sitename_alias.stat.exists == false

- name: "IMPORT: Check if default settings.php exists"
  stat:
    path: "{{ drupal_root }}/{{ default_site }}/settings.php"
  register: default_settings

- name: "IMPORT: Allow new site to connect to remote MySQL"
  blockinfile:
    dest: "{{ drupal_root }}/{{ default_site }}/settings.php"
    block: |
      $databases['default']['default'] = [
        'database' => '{{ sitename }}',
        'username' => '{{ db_creds }}',
        'password' => '{{ db_creds }}',
        'prefix' => '',
        'host' => '{{ db_ip }}',
        'port' => '{{ db_port }}',
        'driver' => 'mysql',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED REMOTE MYSQL CONNECTION BLOCK"
  when: default_settings.stat.exists == true

- import_tasks: ../common/app-registry.yml