#!/usr/bin/env bash

apache_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep apache2 | head -1) ]]; then
    echo -e "${RED}!!! Apache is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} service apache2 start > /dev/null 2>&1
    sleep 1
  else
    echo '- Apache is up'
  fi
}

phpfpm_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep php-fpm | head -1) ]]; then
    echo -e "${RED}!!! PHP-FPM is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} service php7.2-fpm start > /dev/null 2>&1
    sleep 1
  else
    echo '- PHP-FPM is up'
  fi
}

mysql_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep mysqld | head -1) ]]; then
    echo -e "${RED}!!! MySQL is down.${COLOR_ENDING} Starting..."
    docker exec -t ${CONTAINER} chown ${MYSQL_DIR_OWNERSHIP}:${MYSQL_DIR_OWNERSHIP} ${CONTAINER_DB_PATH} > /dev/null 2>&1
    docker exec -t ${CONTAINER} mysqld& > /dev/null 2>&1
    sleep 1
  else
    echo '- MySQL is up'
  fi
}

memcached_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep memcached) ]]; then
    echo -e "${RED}!!! memcached is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} memcached -d -u nobody -m 64 -p 11211 127.0.0.1 > /dev/null 2>&1
    sleep 1
  else
    echo '- memcached is up'
  fi
}

varnish_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep varnish) ]]; then
    echo -e "${RED}!!! Varnish is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} service varnish start > /dev/null 2>&1
    sleep 1
  else
    echo '- Varnish is up'
  fi
}

nginx_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep nginx | head -1) ]]; then
    echo -e "${RED}!!! nginx is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} service nginx start > /dev/null 2>&1
    sleep 1
  else
    echo '- nginx is up'
  fi
}

aptcacherng_check() {
  if [[ -z $(docker exec -it ${CONTAINER} pgrep apt-cacher-ng) ]]; then
    echo -e "${RED}!!! Apt-Cacher NG is down.${COLOR_ENDING} Starting..."
    docker exec -it ${CONTAINER} service apt-cacher-ng start > /dev/null 2>&1
    sleep 1
  else
    echo '- Apt-Cacher NG is up'
  fi
}

solr_check() {
  if [[ -z $(docker exec -it ${CONTAINER} ps -ef | grep -m1 solr | awk '{print $1}') ]]; then
    echo -e "${RED}!!! Apache Solr is down.${COLOR_ENDING} Starting..."
    docker exec -it -u solr ${CONTAINER} /opt/solr/bin/solr start > /dev/null 2>&1
    sleep 1
  else
    echo '- Apache Solr is up'
  fi
}

container_status() {
  mapfile -t CONTAINERS_STATUS < <( docker ps -a | grep 'drucker_' | awk '{print $9}' )
  for STATUS in ${CONTAINERS_STATUS[@]}; do
    if [[ " ${STATUS[*]} " == *" Exited "* ]]; then
      echo 'All containers need to be started to run the health check.'
      echo 'Run drucker containers:start'
      exit 0
    fi
  done
}

run_healthcheck() {
  container_status
  mapfile -t CONTAINERS < <( docker ps | grep 'drucker_' | awk '{print $NF}' )

  for CONTAINER in ${CONTAINERS[@]}; do
    if [[ "${CONTAINER}" == "drucker_web" ]]; then
      echo -e "${BLUE}Checking services for ${CONTAINER}${COLOR_ENDING}"
      apache_check
      phpfpm_check
    fi

    if [[ "${CONTAINER}" == "drucker_search" ]]; then
      echo -e "${BLUE}Checking services for ${CONTAINER}${COLOR_ENDING}"
      solr_check
    fi

    if [[ "${CONTAINER}" == "drucker_db" ]]; then
      echo -e "${BLUE}Checking services for ${CONTAINER}${COLOR_ENDING}"
      mysql_check
      memcached_check
    fi

    if [[ "${CONTAINER}" == "drucker_edge" ]]; then
      echo -e "${BLUE}Checking services for ${CONTAINER}${COLOR_ENDING}"
      varnish_check
      nginx_check
    fi

    if [[ "${CONTAINER}" == "drucker_mirror" ]]; then
      echo -e "${BLUE}Checking services for ${CONTAINER}${COLOR_ENDING}"
      apache_check
      aptcacherng_check
    fi
  done
  exit 0
}

run_app_dev() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to switch to development mode.
  for SITE in ${SITENAME//,/ }; do
    app_dev
  done
  exit 0
}

run_app_prod() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to switch to production mode.
  for SITE in ${SITENAME//,/ }; do
    app_prod
  done
  exit 0
}

run_app_drupal() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to create.
  for SITE in ${SITENAME//,/ }; do
    app_drupal
  done
  exit 0
}

run_app_import() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to import.
  for SITE in ${SITENAME//,/ }; do
    app_import
  done
  exit 0
}

reinstall_sites() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to reinstall.
  for SITE in ${SITENAME//,/ }; do
    drupal_reinstall
  done
  exit 0
}

run_app_blt() {
  # Comma-separated builds are split into single values for drucker to
  # get a list of BLT builds to create.
  for SITE in ${SITENAME//,/ }; do
    app_blt
  done
  exit 0
}

run_app_lightning() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of Lightning sites to create.
  for SITE in ${SITENAME//,/ }; do
    app_lightning
  done
  exit 0
}

run_app_reservoir() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of Reservoir sites to create.
  for SITE in ${SITENAME//,/ }; do
    app_reservoir
  done
  exit 0
}

run_app_delete() {
  # Comma-separated sitenames are split into single values for drucker to
  # get a list of sites to delete.
  for SITE in ${SITENAME//,/ }; do
    app_delete
  done
  exit 0
}
