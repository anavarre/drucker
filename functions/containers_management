#!/usr/bin/env bash

start_drucker_search_services() {
  docker exec -it -u solr ${CONTAINER_TO_START} /opt/solr/bin/solr start > /dev/null 2>&1
  sleep 1
}

start_drucker_web_services() {
  docker exec -it ${CONTAINER_TO_START} service apache2 start > /dev/null 2>&1
  sleep 1
  docker exec -it ${CONTAINER_TO_START} service php7.2-fpm start > /dev/null 2>&1
  sleep 1
}

start_drucker_db_services() {
  docker exec -t ${CONTAINER_TO_START} mysqld& > /dev/null 2>&1
  sleep 1
  docker exec -it ${CONTAINER_TO_START} memcached -d -u nobody -m 64 -p 11211 127.0.0.1 > /dev/null 2>&1
  sleep 1
}

start_drucker_edge_services() {
  docker exec -it ${CONTAINER_TO_START} service varnish start > /dev/null 2>&1
  sleep 1
  docker exec -it ${CONTAINER_TO_START} service nginx start > /dev/null 2>&1
  sleep 1
}

start_drucker_mirror_services() {
  docker exec -it ${CONTAINER_TO_START} service apache2 start > /dev/null 2>&1
  sleep 1
  docker exec -it ${CONTAINER_TO_START} service apt-cacher-ng start > /dev/null 2>&1
  sleep 1
}

start_services() {
  if [[ "${CONTAINER_TO_START}" == "drucker_search" ]]; then
    start_drucker_search_services
  elif [[ "${CONTAINER_TO_START}" == "drucker_web" ]]; then
    start_drucker_web_services
  elif [[ "${CONTAINER_TO_START}" == "drucker_db" ]]; then
    start_drucker_db_services
  elif [[ "${CONTAINER_TO_START}" == "drucker_edge" ]]; then
    start_drucker_edge_services
  elif [[ "${CONTAINER_TO_START}" == "drucker_mirror" ]]; then
    start_drucker_mirror_services
  fi
}

start_containers() {
  mapfile -t CONTAINERS_TO_START < <( docker ps -a | grep 'Exited' | grep 'drucker_' | awk '{print $NF}' )
  if [[ -z "${CONTAINERS_TO_START}" ]]; then
    echo "All drucker containers are already started."
    exit 0
  else
    echo -e "${BLUE}Starting drucker containers...${COLOR_ENDING}"
    for CONTAINER_TO_START in ${CONTAINERS_TO_START[@]}; do
      docker start ${CONTAINER_TO_START}
      start_services
    done
  fi

  run_healthcheck
  exit 0
}

stop_containers() {
  mapfile -t CONTAINERS_TO_STOP < <( docker ps -a | grep 'Up' | grep 'drucker_' | awk '{print $NF}' )
  if [[ -z "${CONTAINERS_TO_STOP}" ]]; then
    echo "All drucker containers are already stopped."
    exit 0
  else
    echo -e "${BLUE}Stopping drucker containers...${COLOR_ENDING}"
    for CONTAINER_TO_STOP in ${CONTAINERS_TO_STOP[@]}; do
      docker stop ${CONTAINER_TO_STOP}
    done
  fi
}

restart_containers() {
  mapfile -t CONTAINERS_TO_RESTART < <( docker ps -a | grep 'Up' | grep 'drucker_' | awk '{print $NF}' )
  if [[ -z "${CONTAINERS_TO_RESTART}" ]]; then
    echo -e "\n${RED}You cannot restart containers that are stopped!\n${COLOR_ENDING}"
    echo -e "Run ${GREEN}drucker containers:start\n${COLOR_ENDING}"
    exit 0
  else
    stop_containers
    start_containers
  fi
  exit 0
}

check_containers_status() {
  mapfile -t CONTAINERS_STATUS < <( docker ps -a | grep 'Up' | grep 'drucker_' | awk '{print $NF}' )
  if [[ -z "${CONTAINERS_STATUS}" ]]; then
    echo -e "\n${RED}You cannot run this command when containers are stopped!\n${COLOR_ENDING}"
    echo -e "Run ${GREEN}drucker containers:start\n${COLOR_ENDING}"
    exit 0
  fi
}
